from bootstrap_modal_forms.generic import BSModalLoginView
from django import http
from django.conf import settings
from django.contrib import messages
from django.contrib.auth import views, logout, login, authenticate
from django.contrib.auth.hashers import check_password
from django.shortcuts import redirect, render
from django.urls import reverse_lazy
from . import mixins, forms, models


# Create your views here.

# unused
class SignupModalView(mixins.SignupLogicMixin):
    form_class = forms.SignupForm
    template_name = "auth/_signup.html"
    success_message = "–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!"
    success_url = reverse_lazy("dashboard:index")


# unused
class LoginModalView(BSModalLoginView):
    form_class = forms.LoginForm
    template_name = "auth/_login_modal.html"
    success_message = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!"
    success_url = reverse_lazy("dashboard:dashboard")


class RegisterView(views.FormView):
    template_name = "dashboard_users/auth/_register.html"
    form_class = forms.NewUserForm

    def get(self, request, *args, **kwargs):
        form = self.form_class()
        return render(request=request, template_name=self.template_name, context={
            "register_form": form,
            "app_version": settings.APP_VERSION
        })

    def post(self, request, *args, **kwargs):
        form = self.form_class(request.POST)

        if form.is_valid():
            user = form.save()
            login(request, user)
            messages.success(request, "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û–∂–∏–¥–∞–π—Ç–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")

            return http.HttpResponseRedirect(redirect_to=reverse_lazy("dashboard:dashboard"))
        else:
            messages.error(request, "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å –Ω–µ—É–¥–∞—á–Ω–æ. –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è.")
            return render(request, self.template_name, context={
                "register_form": form,
            })


class LoginView(views.LoginView):
    template_name = "dashboard_users/auth/_login.html"
    form_class = forms.LoginForm

    def get(self, request, *args, **kwargs):
        form = self.form_class()
        return render(request, self.template_name, context={
            "login_form": form,
            "app_version": settings.APP_VERSION
        })

    def post(self, request, *args, **kwargs):
        form = self.form_class(request, data=request.POST)

        if form.is_valid():
            username = form.cleaned_data['username']
            password = form.cleaned_data['password']

            user = authenticate(username=username, password=password)

            if user is not None:
                login(request, user)
                messages.info(request, f"–í—ã –≤–æ—à–ª–∏ –∫–∞–∫ {username}.")
                return http.HttpResponseRedirect(redirect_to=reverse_lazy("dashboard:dashboard"))
            else:
                messages.error(request, '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ª–æ–≥–∏–Ω, –ª–∏–±–æ –ø–∞—Ä–æ–ª—å.')
        else:
            username = form.cleaned_data['username']
            password = form.cleaned_data['password']

            try:
                user = models.CustomUser.objects.get(username=username)

                if not user.is_active and check_password(password, user.password):
                    messages.error(request, '–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –µ—â–µ –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.')
                else:
                    messages.error(request, '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ª–æ–≥–∏–Ω, –ª–∏–±–æ –ø–∞—Ä–æ–ª—å.')
            except models.CustomUser.DoesNotExist:
                messages.error(request, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.')

        return render(request, self.template_name, context={
            "login_form": self.form_class(),
            "app_version": settings.APP_VERSION
        })


def logout_view(request):
    logout(request)
    messages.info(request, "–£–¥–∞—á–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –±–µ–∑ –¥–∞—à–±–æ—Ä–¥–∞ ü§£")
    return redirect("dashboard_users:login")
