# Generated by Django 4.1.4 on 2023-01-22 08:27

from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Target',
            fields=[
                ('id', models.IntegerField(default=1, primary_key=True, serialize=False)),
                ('address', models.GenericIPAddressField(unique=True, verbose_name='IP-адрес целевого сервера:')),
                ('port', models.SmallIntegerField(verbose_name='Порт сервера:')),
                ('username', models.CharField(max_length=32, verbose_name='Логин сервера:')),
                ('password', models.CharField(max_length=32, verbose_name='Пароль сервера:')),
                ('server_role', models.CharField(choices=[('media', 'MEDIA'), ('head', 'HEAD')], default='media', max_length=6, verbose_name='Роль сервера:')),
            ],
        ),
        migrations.CreateModel(
            name='Server',
            fields=[
                ('hostname', models.CharField(default='none', max_length=64, verbose_name='Имя сервера:')),
                ('os', models.CharField(default='none', max_length=32, verbose_name='Операционная система:')),
                ('kernel', models.CharField(default='none', max_length=64, verbose_name='Ядро ОС:')),
                ('server', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='dashboard.target', verbose_name='Целевой хост:')),
            ],
        ),
        migrations.CreateModel(
            name='RAM',
            fields=[
                ('uuid_record', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('total_ram', models.FloatField(default=0, verbose_name='Всего RAM:')),
                ('ram_free', models.FloatField(default=0, verbose_name='Свободной памяти:')),
                ('ram_used', models.FloatField(default=0, verbose_name='Занятой памяти:')),
                ('record_date', models.DateTimeField(auto_now=True, verbose_name='Время сканирования:')),
                ('server_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dashboard.server', verbose_name='Сервер:')),
            ],
        ),
        migrations.CreateModel(
            name='NetInterface',
            fields=[
                ('uuid_record', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('interface', models.CharField(default='null', max_length=32, verbose_name='Интерфейс:')),
                ('status', models.CharField(default='null', max_length=4, verbose_name='Состояние:')),
                ('ip_address', models.GenericIPAddressField(default='0.0.0.0', verbose_name='IP-адрес интерфейса:')),
                ('rx_bytes', models.FloatField(default=0, verbose_name='Получено байтов:')),
                ('rx_packets', models.FloatField(default=0, verbose_name='Получено пакетов:')),
                ('rx_errors_dropped', models.FloatField(default=0, verbose_name='Отброшено пакетов:')),
                ('rx_errors_overruns', models.FloatField(default=0, verbose_name='Перерасходованных пакетов:')),
                ('rx_errors_frame', models.FloatField(default=0, verbose_name='Неправильных кадров:')),
                ('tx_bytes', models.FloatField(default=0, verbose_name='Отправлено байтов:')),
                ('tx_packets', models.FloatField(default=0, verbose_name='Отправлено пакетов:')),
                ('tx_errors_errors', models.FloatField(default=0, verbose_name='Отправлено с ошибками:')),
                ('tx_errors_dropped', models.FloatField(default=0, verbose_name='Отброшено при отправке пакетов:')),
                ('tx_errors_overruns', models.FloatField(default=0, verbose_name='Перерасходованных при отправке пакетов:')),
                ('tx_errors_carrier', models.FloatField(default=0, verbose_name='Пакетов с потерянными носителями :')),
                ('tx_errors_collisions', models.FloatField(default=0, verbose_name='Отправлено пакетов с коллизиями:')),
                ('record_date', models.DateTimeField(auto_now=True, verbose_name='Время сканирования:')),
                ('server_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dashboard.server', verbose_name='Сервер:')),
            ],
        ),
        migrations.CreateModel(
            name='DiskSpace',
            fields=[
                ('uuid_record', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('file_system', models.CharField(default='none', max_length=128, verbose_name='Файловая система:')),
                ('fs_size', models.FloatField(default=0, verbose_name='Размер файловой системы:')),
                ('fs_used', models.FloatField(default=0, verbose_name='Занято:')),
                ('fs_used_prc', models.FloatField(default=0, verbose_name='Занято в %:')),
                ('fs_avail', models.FloatField(default=0, verbose_name='Доступно:')),
                ('mounted_on', models.CharField(default='none', max_length=128, verbose_name='Подключено к:')),
                ('record_date', models.DateTimeField(auto_now=True, verbose_name='Время сканирования:')),
                ('server_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dashboard.server', verbose_name='Сервер:')),
            ],
        ),
        migrations.CreateModel(
            name='CPU',
            fields=[
                ('uuid_record', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('cpu_cores', models.IntegerField(default=0, verbose_name='Количество ядер:')),
                ('cpu_load', models.FloatField(default=0, verbose_name='Загрузка процессора %:')),
                ('cpu_idle', models.FloatField(default=0, verbose_name='Простой процессора %:')),
                ('record_date', models.DateTimeField(auto_now=True, verbose_name='Время сканирования:')),
                ('server_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dashboard.server', verbose_name='Сервер:')),
            ],
        ),
    ]
